<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TCLBs on TCLB Docs</title>
    <link>/tclb/</link>
    <description>Recent content in TCLBs on TCLB Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Not yet known</copyright>
    <lastBuildDate>Thu, 23 Jul 2015 21:13:14 -0500</lastBuildDate>
    
	<atom:link href="/tclb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Analyzing results</title>
      <link>/tclb/user_results/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/user_results/</guid>
      <description>Results of the calculations can be analyzed using ParaView, an open-source, multi-platform data analysis and visualization application. It can be easily installed by running
sudo apt-get install paraviewOr, if you want to install newer version, it can be downloaded here.
Paraview can open most of the files generated by the TCLB solver(.pvti,.csv) or required to run calculations(.stl).
File extensionComment.vtiVTK files generated by the &amp;lt;VTK&amp;gt; callback in .</description>
    </item>
    
    <item>
      <title>D2Q9 Single Relexation Time</title>
      <link>/tclb/model_tut_d2q9srt/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/model_tut_d2q9srt/</guid>
      <description>This tutorial will try to teach you how to make and use lattice Boltzmann (LB) models within the TCLB environment. First a brief overview will be given of the discrete lattice Boltzmann equation taking advantage of the Bhatnagar-Gross-Krook (BGK) collision operator (also known as single relaxation time operator) will be given, then the code required to simulate Poiseuille flow will be developed.
The BGK-lattice Boltzmann EquationThe discrete form of the Boltzmann transport equation can be expressed as:</description>
    </item>
    
    <item>
      <title>Dynamics.R</title>
      <link>/tclb/definitions_r/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/definitions_r/</guid>
      <description>Field/DensityFields are variables stored in mesh nodes. It is usually necessary to be able to look into neighbouring value. This needs to be specify during Field declaration, as the code must ‘know’ that we want to access this fields values in neighbours, or otherwise it won’t compile. It can be done by by using dx=c(), where c(..) means vector in R programming language.
AddField(name=&amp;quot;u&amp;quot;, dx=c(-1,1), dy=c(-1,1)) #2D caseAddField(name=&amp;quot;u&amp;quot;, dx=c(-1,1), dy=c(-1,1), dz=c(-1,1)) #3D caseIt can also be done using stencil.</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>/tclb/user_examples/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/user_examples/</guid>
      <description>Example casesIn this section, a few case files will be presented, along with notes on their structure and usage of most popular functions. All of them(and some others) can be found in TCLB/examples catalogue(TODO: powrzucać te przykłady).
Simple caseBelow is presented a simple 3-Dimensional case, with a ball in the middle of the domain. Velocity inlet is used on one side and pressure outlet on the another one(TODO:Orientacja NEWS).</description>
    </item>
    
    <item>
      <title>FD wave equation</title>
      <link>/tclb/model_tut_fd/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/model_tut_fd/</guid>
      <description>These tutorials will try to teach you how to make and use a new model in TCLB. First it will discuss our goal: the model we want to create. Then it will take you step by step, on how to create all the needed components.
Finite difference wave equationWe want to discretize the Wave Equation:
\(\ddot{u} = c^2\Delta u\)
For this purpose we will use Finite Difference method. First we change the equation into two first order (in time) equations:</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>/tclb/user_installation/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/user_installation/</guid>
      <description>InstallationDownloading filesbash git clone https://github.com/CFD-GO/TCLB.git cd TCLBs ##Dependencies
In order to use TCLB solver, the following tools are required:
Rpackages for R: optparse, numbers, template, gvector, polyAlgebranVidia CUDA (if you want to use GPU)pythonnumpy (if you want to use the integrated python interpreter)python, pythonrPython (if you want to develop a model using python in place or R)MPI (e.g. [OpenMPI](http://www.open-mpi.orgMost of them can be installed using the script provided within the code(tools/install.</description>
    </item>
    
    <item>
      <title>Model Information</title>
      <link>/tclb/model_info/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/model_info/</guid>
      <description>TODO: Dodać rozwiązane tutoriale, sprawdzić by działało wszystko.
Basic information needed to develop models will apear here.
Every model in TCLB is defined by a subdirectory of models. The conf.mk file stores some additional settings for a model, but it also tells TCLB that this directory is in fact a model.
General informationEach model consit 2 most important files: Dynamics.c and Dynamics.R, what goes where(logic, settings, quantities)
conf.mkADJOINT = 1</description>
    </item>
    
    <item>
      <title>Running calculations</title>
      <link>/tclb/user_calc/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/user_calc/</guid>
      <description>UsageCLB/MODEL_NAME/main case_pathWhere MODEL_NAME is the name of the desired model(e.g.d2q9) and case_path is the location of case file(.xml), relative to the TCLB folder.
For example, to run karman.xml case, located in subfolder example\flow\2d, using d2q9 model:
CLB/d2q9/main example/flow/2d/karman.xmlCPU-based usageBy default the code will run on GPU, which requires a NVIDIA GPU with CUDA support. In order to run it on CPU, the code must be compiled using --disable-cuda option.</description>
    </item>
    
    <item>
      <title>TCLB Manual</title>
      <link>/tclb/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/</guid>
      <description>Site mapThis site contains documentation to the TCLB solver. Documentation is split in 4 parts.
User Manual - Information about downloading and installing TCLB, performing calculations, setting up a simple case, and analysing results.Model Development - Contains information necessary to develop/modify models, includes tutorials which showcase basic concepts used in code.XML Reference - Useful when configuring more advanced cases, contains documentation of supported functions.Developer Manual - Documentation and examples useful in working with TCLB solver.</description>
    </item>
    
    <item>
      <title>Units</title>
      <link>/tclb/definitions_units/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/definitions_units/</guid>
      <description>Units provide a way to connect LB units to real ones. Currently, there are several units defined in the code. There are
Defined units:UnitMeaningmmeterssecondkgkilogramKKelvinAAmpertSecond time scale, needed in EOF in steady state simulationsx,y,zArtificial units(?)Derrived units:UnitDefinitionMeaningN1kgm/s2NewtonPa1N/m2PascalJ1NmJoulW1J/sWattV1kgm2/t3/AVoltC1tACoulombPrefixes:PrefixDefinitionMeaningnm1e-9mnanometreum1e-6mmicrometrecm1e-2mcentimetrekm1e+3mkilometreh3600shourns1e-9snanosecondus1e-6smicrosecondms1e-3smilisecondmg1e-6smiligramg1e-3sgramAn6.</description>
    </item>
    
    <item>
      <title>User Manual</title>
      <link>/tclb/user_config/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/user_config/</guid>
      <description>Case configurationAll case properties(geometry,BCs,model settings, etc.) are specified within XML files. Generally, the structure of the file should look like that:
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&amp;lt;CLBConfig&amp;gt;&amp;lt;Units&amp;gt;&amp;lt;Params/&amp;gt; &amp;lt;!-- Specify relation between LB and real world units here --&amp;gt;&amp;lt;/Units&amp;gt;&amp;lt;Geometry&amp;gt; &amp;lt;!-- Domain size --&amp;gt; &amp;lt;!-- Collision type, boundary conditions, creating/importing objects --&amp;gt;&amp;lt;/Geometry&amp;gt;&amp;lt;Model&amp;gt;&amp;lt;Params/&amp;gt; &amp;lt;!-- All parameters like velocity, density, viscosity --&amp;gt;&amp;lt;/Model&amp;gt;&amp;lt;!-- Callbacks, python/r code --&amp;gt;&amp;lt;/CLBConfig&amp;gt;Working example with some sample values is shown below, along with explanation of each lines functionality.</description>
    </item>
    
    <item>
      <title>about</title>
      <link>/tclb/about/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/about/</guid>
      <description>AuthorsAuthor: Łukasz Łaniewski-Wołłk
Co-authors: * Michał Dzikowski
Contributors: * Wojtek Regulski * Zbigniew Gawłowicz * Mariusz Rutkowski * Dmytro Sashko
Developed at: C-CFD Group at Warsaw University of Technology from 2012.
LicenseThe software is free to use for non-commercial purposes.
Any usage should be acknowledged accordingly (at least with a reference to this repository). Anyone wanting to use this software in scientific publications should consult the author for the apropriate reference.</description>
    </item>
    
    <item>
      <title>callbacsk</title>
      <link>/tclb/xml_callbacks/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/tclb/xml_callbacks/</guid>
      <description>CallbacksCallbacks allow us to perform actions during calculations e.g. saving quantities to a file. Each action can be done once &amp;lt;Log/&amp;gt; or every X iterations &amp;lt;Log Iterations=&amp;quot;X&amp;quot;/&amp;gt;All the desired actions must be specified before Solve element. E.g. example below will result in running 500 iterations without any output and then running 100 iterations with VTK export each 10 iterations.
&amp;lt;Solve Iterations=&amp;quot;500&amp;quot;/&amp;gt;&amp;lt;VTK Iterations=&amp;quot;10&amp;quot; /&amp;gt;&amp;lt;Solve Iterations=&amp;quot;100&amp;quot;/&amp;gt;Solve&amp;lt;Solve Iterations=&amp;quot;X&amp;quot;/&amp;gt; Runs X iterations</description>
    </item>
    
    <item>
      <title></title>
      <link>/tclb/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tclb/readme/</guid>
      <description>TLCB_site repository for the TCLB documentation and website</description>
    </item>
    
  </channel>
</rss>